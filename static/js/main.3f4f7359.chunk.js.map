{"version":3,"sources":["utils.js","components/SubComponents.js","components/Current.js","components/Tile.js","components/Hourly.js","components/Daily.js","components/UnitInput .js","components/DayDetails.js","components/DetailedWeather.js","api/weather.js","components/Forecast.js","api/places.js","components/Search.js","App.js","index.js"],"names":["getTime","timezone","dt","Date","toLocaleTimeString","timeZone","hour","minute","getDay","toLocaleDateString","weekday","month","day","getTemp","temp","metric","parseInt","imperial","WeatherIcon","weather","size","style","margin","src","icon","alt","description","caption","width","height","Description","variant","Typography","component","align","textTransform","Time","Day","Temperature","temperature","unit","Current","forecast","Container","city","name","paddingLeft","country","id","Grid","container","background","border","justify","spacing","item","current","styles","display","flexDirection","textAlign","padding","Tile","type","children","Object","assign","Paper","square","useStyles","makeStyles","root","flexWrap","marginTop","overflow","gridList","borderTop","borderBottom","gridListTile","Hourly","classes","className","GridList","cols","map","i","GridListTile","Daily","UnitInput","updateUnit","float","color","Switch","checked","onChange","e","isMetric","listItem","DayDetails","entries","sunrise","sunset","feels_like","humidity","pressure","wind_speed","visibility","uvi","dew_point","clouds","prop","value","ListItem","ListSubheader","inset","replaceAll","Transition","forwardRef","props","ref","Zoom","DetailedWeather","open","onClose","onAdd","showAdd","dialog","backgroundImage","dialogPaper","minHeight","maxHeight","Dialog","fullWidth","maxWidth","TransitionComponent","paper","DialogContent","DialogActions","Button","onClick","hourly","daily","getDetailedForecast","a","coordinates","latitude","longitude","console","log","lon","process","part","key","url","fetch","res","setDetails","json","main","time","image1","image2","toLowerCase","split","getBackground","card","Forecast","onSelectForecast","useState","setForecast","useEffect","Card","CardActionArea","CardContent","query","URL","search","URLSearchParams","q","limit","requestApi","getCity","toString","method","headers","body","Search","onSelect","options","setOptions","setValue","isSearching","setIsSearching","getSearchOptions","then","result","DialogContentText","Autocomplete","getOptionLabel","el","newValue","onInputChange","target","filterOptions","state","renderInput","params","TextField","InputProps","theme","createMuiTheme","palette","primary","secondary","App","localStorage","getItem","setUnit","JSON","parse","cities","setCities","openWeather","setOpenWeather","openSearch","setOpenSearch","setShowAdd","selectedForecast","setSelectedForecast","selectedCity","setSelectedCity","setItem","updateCities","stringify","viewDetailedWeather","newCity","length","navigator","geolocation","getCurrentPosition","coords","ThemeProvider","IconButton","aria-label","indexOf","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f4f7359.chunk.js","sourcesContent":["const getTime = (timezone, dt) => {\r\n  const date = dt ? new Date(dt * 1000) : new Date()\r\n  return date.toLocaleTimeString('en-US', {\r\n    timeZone: timezone,\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  })\r\n}\r\n\r\nconst getDay = (timezone, dt) => {\r\n  /* const date = new Date(dt)\r\n   return new Intl.DateTimeFormat('en', {\r\n    weekday: 'short',\r\n    month: 'short',\r\n    day: '2-digit',\r\n    timeZone: timezone\r\n  }).format(date) */\r\n  const date = new Date(dt * 1000)\r\n  return date.toLocaleDateString('en-US', {\r\n    timeZone: timezone,\r\n    weekday: 'short',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\nconst getBackground = ({ icon, main, description }) => {\r\n  const time = icon[2] === 'd' ? 'day' : 'night'\r\n  let image1 = ''\r\n  const image2 = 'backgrounds/' + time + '/clear.jpg'\r\n\r\n  main = main.toLowerCase()\r\n\r\n  // TODO: GET gif FOR EVERY PATH1\r\n  if (main === 'rain' || main === 'snow') image1 = `backgrounds/${main}.svg`\r\n  else if (main === 'fog') image1 = 'backgrounds/fog.png'\r\n  else if (main === 'thunderstorm' || main === 'tornado')\r\n    image1 = `backgrounds/${main}.jpg`\r\n  else if (main === 'clouds') {\r\n    image1 =\r\n      description === 'scattered clouds'\r\n        ? `backgrounds/${time}/${main}/scattered.gif`\r\n        : `backgrounds/${time}/${main}/${description.split(' ')[0]}.jpg`\r\n  }\r\n\r\n  return (image1 ? `url(${image1}),` : '') + `url(${image2})`\r\n}\r\n\r\nfunction getTemp (temp) {\r\n  return {\r\n    metric: parseInt(temp - 276.15),\r\n    imperial: parseInt(((temp - 276.15) * 9) / 5 + 32)\r\n  }\r\n}\r\nexport { getTime, getDay, getBackground, getTemp }\r\n","import { Typography } from '@material-ui/core'\r\nimport { getTime, getDay, getTemp } from '../utils'\r\n\r\nfunction WeatherIcon ({ weather, size }) {\r\n  return (\r\n    <img\r\n      style={{ margin: 'auto' }}\r\n      src={`http://openweathermap.org/img/w/${weather.icon}.png`}\r\n      alt={weather.description}\r\n      caption={weather.description}\r\n      width={size}\r\n      height={size}\r\n    />\r\n  )\r\n}\r\nfunction Description ({ weather, variant = 'subtitle1' }) {\r\n  return (\r\n    <Typography\r\n      component='div'\r\n      align='center'\r\n      variant={variant}\r\n      style={{ textTransform: 'capitalize' }}\r\n    >\r\n      {weather.description}\r\n    </Typography>\r\n  )\r\n}\r\n\r\nfunction Time ({ dt, timezone, variant = 'body1' }) {\r\n  return <Typography variant={variant}>{getTime(timezone, dt)}</Typography>\r\n}\r\n\r\nfunction Day ({ dt, timezone }) {\r\n  return <Typography variant='caption'>{getDay(timezone, dt)}</Typography>\r\n}\r\n\r\nfunction Temperature ({ temperature, unit, variant = 'h3' }) {\r\n  // console.log('temperature', temperature)\r\n  const temp = unit ? getTemp(temperature)[unit] : temperature\r\n  return (\r\n    <Typography align='center' variant={variant}>\r\n      {temp}&deg;\r\n    </Typography>\r\n  )\r\n}\r\n\r\nexport { WeatherIcon, Temperature, Description, Time, Day }\r\n","import { Container, Grid, Typography } from '@material-ui/core'\r\nimport { Temperature, Description } from './SubComponents'\r\n\r\nexport default function Current ({ forecast, unit }) {\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Typography variant='h6' align='center'>\r\n          {forecast.city?.name},\r\n          <Typography\r\n            variant='body1'\r\n            component='span'\r\n            style={{ paddingLeft: '5px' }}\r\n          >\r\n            {forecast.city?.country?.id}\r\n          </Typography>\r\n        </Typography>\r\n      </Container>\r\n      <Grid\r\n        container\r\n        style={{\r\n          background: 'transparent',\r\n          border: 'none',\r\n          margin: 'auto'\r\n        }}\r\n        justify='space-evenly'\r\n        spacing={2}\r\n      >\r\n        <Grid item>\r\n          <Temperature temperature={forecast.current[unit]} variant='h2' />\r\n        </Grid>\r\n        <Container>\r\n          {/* <WeatherIcon weather={forecast.current.weather[0]} size='100px' /> */}\r\n          <Description weather={forecast.current.weather[0]} />\r\n        </Container>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n","import { WeatherIcon, Temperature, Description } from './SubComponents'\r\nimport { getTemp } from '../utils'\r\nimport { Paper } from '@material-ui/core'\r\n\r\nconst styles = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  textAlign: 'center',\r\n  padding: '10px 0'\r\n}\r\n\r\nexport default function Tile ({ weather, unit, type, children }) {\r\n  type === 'daily'\r\n    ? Object.assign(weather, getTemp(weather.temp.day))\r\n    : Object.assign(weather, getTemp(weather.temp))\r\n  return (\r\n    <Paper variant='outlined' square style={styles}>\r\n      <WeatherIcon weather={weather.weather[0]} />\r\n      <Temperature temperature={weather[unit]} variant='h5' />\r\n      <Description weather={weather.weather[0]} variant='caption' />\r\n      {children}\r\n    </Paper>\r\n  )\r\n}\r\n","import {\r\n  GridList,\r\n  GridListTile,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core'\r\nimport Tile from './Tile'\r\nimport { Time } from './SubComponents'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    marginTop: '50px',\r\n    overflow: 'hidden'\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    borderTop: 'solid 1px white',\r\n    borderBottom: 'solid 1px white'\r\n  },\r\n  gridListTile: {\r\n    margin: 'auto'\r\n  }\r\n})\r\nexport default function Hourly ({ forecast, unit, timezone }) {\r\n  const classes = useStyles()\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant='overline'>Hourly Forecast</Typography>\r\n      <GridList cols={4} spacing={0} className={classes.gridList}>\r\n        {forecast.map((weather, i) => (\r\n          <GridListTile cols={0.5} key={i}>\r\n            <Tile\r\n              weather={weather}\r\n              unit={unit}\r\n              children={\r\n                <>\r\n                  <hr style={{ width: '100%', margin: '10px 0' }} />\r\n                  <Time timezone={timezone} dt={weather.dt} />\r\n                </>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  )\r\n}\r\n","import {\r\n  GridList,\r\n  GridListTile,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core'\r\nimport Tile from './Tile'\r\nimport { Day } from './SubComponents'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: '50px',\r\n    overflow: 'hidden',\r\n    width: '100%'\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    borderTop: 'solid 1px white',\r\n    borderBottom: 'solid 1px white',\r\n    width: '100%'\r\n  },\r\n  gridListTile: {\r\n    margin: 'auto'\r\n  }\r\n})\r\nexport default function Daily ({ forecast, unit, timezone }) {\r\n  const classes = useStyles()\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant='overline'>Daily Forecast</Typography>\r\n      <GridList cols={4} spacing={0} className={classes.gridList}>\r\n        {forecast.map(weather => (\r\n          <GridListTile cols={0.5} key={weather.dt}>\r\n            <Tile\r\n              weather={weather}\r\n              unit={unit}\r\n              type='daily'\r\n              children={\r\n                <>\r\n                  <hr style={{ width: '100%', margin: '10px 0' }} />\r\n                  <Day timezone={timezone} dt={weather.dt} />\r\n                </>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  )\r\n}\r\n","import Switch from '@material-ui/core/Switch'\r\n\r\nexport default function UnitInput ({ unit, updateUnit }) {\r\n  return (\r\n    <span style={{ float: 'left', color: 'white' }}>\r\n      &deg;F\r\n      <Switch\r\n        checked={unit === 'metric'}\r\n        onChange={(e, isMetric) => updateUnit(isMetric ? 'metric' : 'imperial')}\r\n        name='unit'\r\n      />\r\n      &deg;C\r\n    </span>\r\n  )\r\n}\r\n","import {\r\n  GridList,\r\n  ListItem,\r\n  ListSubheader,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core'\r\nimport { Time, Temperature } from './SubComponents'\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    margin: '50px auto'\r\n  },\r\n  gridList: {\r\n    borderTop: 'solid 1px white',\r\n    borderBottom: 'solid 1px white',\r\n    marginTop: '0'\r\n  },\r\n  listItem: {}\r\n})\r\n\r\nexport default function DayDetails ({ weather, timezone, unit }) {\r\n  const classes = useStyles()\r\n  const details = {\r\n    sunrise: 'time',\r\n    sunset: 'time',\r\n    feels_like: 'temp',\r\n    humidity: '%',\r\n    pressure: 'hPa',\r\n    wind_speed: 'm/s',\r\n    visibility: 'm',\r\n    uvi: '',\r\n    dew_point: 'temp',\r\n    clouds: '%'\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant='overline'>Day Details</Typography>\r\n      <GridList className={classes.gridList}>\r\n        {Object.entries(details).map(([prop, value]) => {\r\n          const component =\r\n            value === 'time' ? (\r\n              <Time dt={weather[prop]} timezone={timezone} variant='h6' />\r\n            ) : value === 'temp' ? (\r\n              <Temperature\r\n                temperature={weather[prop]}\r\n                unit={unit}\r\n                variant='h6'\r\n              />\r\n            ) : (\r\n              <Typography variant='h6'>\r\n                {weather[prop]} {value}\r\n              </Typography>\r\n            )\r\n\r\n          return (\r\n            <ListItem\r\n              key={prop}\r\n              className={classes.listItem}\r\n              style={{ height: 'auto' }}\r\n            >\r\n              <ListSubheader\r\n                inset\r\n                component='div'\r\n                style={{ textTransform: 'uppercase' }}\r\n              >\r\n                {prop.replaceAll('_', ' ')}\r\n              </ListSubheader>\r\n              <div>{component}</div>\r\n            </ListItem>\r\n          )\r\n        })}\r\n      </GridList>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, forwardRef } from 'react'\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  Grid,\r\n  Zoom\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport Current from './Current'\r\nimport Hourly from './Hourly'\r\nimport Daily from './Daily'\r\nimport UnitInput from './UnitInput '\r\nimport DayDetails from './DayDetails'\r\n\r\nconst Transition = forwardRef(function Transition (props, ref) {\r\n  return <Zoom ref={ref} {...props} />\r\n})\r\nexport default function DetailedWeather ({\r\n  open,\r\n  onClose,\r\n  onAdd,\r\n  forecast,\r\n  showAdd,\r\n  unit,\r\n  updateUnit\r\n}) {\r\n  const classes = makeStyles({\r\n    dialog: {\r\n      backgroundImage: forecast.background\r\n    },\r\n    dialogPaper: {\r\n      minHeight: '90vh',\r\n      maxHeight: '80vh'\r\n    }\r\n  })()\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      fullWidth\r\n      maxWidth='lg'\r\n      TransitionComponent={Transition}\r\n      classes={{ paper: classes.dialogPaper }}\r\n    >\r\n      <DialogContent className={classes.dialog}>\r\n        <Grid\r\n          container\r\n          spacing={10}\r\n          style={{ height: '100%' }}\r\n          justify='space-between'\r\n        >\r\n          <Grid item>\r\n            <UnitInput unit={unit} updateUnit={updateUnit} />\r\n          </Grid>\r\n          <Grid item>\r\n            <DialogActions>\r\n              {showAdd && (\r\n                <Button onClick={onAdd} color='secondary'>\r\n                  Add\r\n                </Button>\r\n              )}\r\n              <Button onClick={onClose} color='secondary'>\r\n                Done\r\n              </Button>\r\n            </DialogActions>\r\n          </Grid>\r\n          <Current forecast={forecast} unit={unit} />\r\n          <Hourly\r\n            forecast={forecast.hourly}\r\n            unit={unit}\r\n            timezone={forecast.timezone}\r\n          />\r\n          <Daily\r\n            forecast={forecast.daily}\r\n            unit={unit}\r\n            timezone={forecast.timezone}\r\n          />\r\n          <DayDetails\r\n            weather={forecast.current}\r\n            timezone={forecast.timezone}\r\n            unit={unit}\r\n          />\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n","// import { OneCallAPI as res } from '../sample-data.json'\r\nimport { getBackground, getTemp } from '../utils'\r\n\r\nasync function getForecast (city) {\r\n  const url = new URL(\r\n    'https://community-open-weather-map.p.rapidapi.com/weather'\r\n  )\r\n\r\n  if (city.name) {\r\n    url.search = new URLSearchParams({ q: city.name })\r\n  } else if (city.lat && city.lon) {\r\n    url.search = new URLSearchParams({ lat: city.lat, lon: city.lon })\r\n  } else throw Error('Invalid City Object')\r\n\r\n  const requestOptions = {\r\n    method: 'GET',\r\n    headers: {\r\n      'x-rapidapi-key': process.env.REACT_APP_RAPIDAPI_KEY,\r\n      'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com',\r\n      useQueryString: true\r\n    }\r\n  }\r\n  const res = await fetch(url, requestOptions)\r\n  return await res.json()\r\n}\r\n\r\nasync function getDetailedForecast (city) {\r\n  const {\r\n    coordinates: { latitude, longitude }\r\n  } = city\r\n  console.log('Getting detailed forecast for ', latitude, longitude)\r\n  const [lat, lon, part, key] = [\r\n    latitude,\r\n    longitude,\r\n    'minutely,alerts',\r\n    process.env.REACT_APP_WEATHERAPI_KEY\r\n  ]\r\n  const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=${part}&appid=${key}`\r\n  const res = await fetch(url)\r\n  return setDetails(await res.json(), city)\r\n  /* const x = setDetails(res[city.name.toLowerCase()], city)\r\n  console.log(x)\r\n  return x */\r\n}\r\n\r\nfunction setDetails (forecast, city) {\r\n  Object.assign(forecast.current, getTemp(forecast.current.temp))\r\n  forecast.background = getBackground(forecast.current.weather[0])\r\n  forecast.city = city\r\n  return forecast\r\n}\r\nexport { getForecast, getDetailedForecast }\r\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  Typography\r\n} from '@material-ui/core'\r\nimport { WeatherIcon, Temperature, Time } from './SubComponents'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { getDetailedForecast } from '../api/weather'\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    margin: '5px auto'\r\n  },\r\n  city: {\r\n    width: '70%',\r\n    textAlign: 'left'\r\n  },\r\n  temperature: {\r\n    margin: '5px'\r\n  }\r\n})\r\n\r\nexport default function Forecast ({ city, unit, onSelectForecast }) {\r\n  console.log('Loaded city and unit')\r\n  const [forecast, setForecast] = useState('')\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      setForecast(await getDetailedForecast(city))\r\n    })()\r\n  }, [city])\r\n\r\n  const classes = useStyles()\r\n  return (\r\n    <>\r\n      {forecast && (\r\n        <Card\r\n          className={classes.card}\r\n          color='primary'\r\n          style={{ backgroundImage: forecast.background }}\r\n        >\r\n          <CardActionArea\r\n            style={{ display: 'flex' }}\r\n            onClick={() => onSelectForecast(forecast)}\r\n          >\r\n            <CardContent>\r\n              <WeatherIcon weather={forecast.current.weather[0]} />\r\n            </CardContent>\r\n            <CardContent className={classes.city}>\r\n              <Time timezone={forecast.timezone} variant='caption' />\r\n              <Typography variant='h5'>{forecast.city.name}</Typography>\r\n            </CardContent>\r\n            <CardContent className={classes.temperature}>\r\n              <Temperature temperature={forecast.current[unit]} />\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Card>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","// import { del as data } from '../sample-data.json'\r\nasync function getSearchOptions (query) {\r\n  const url = new URL('https://spott.p.rapidapi.com/places/autocomplete')\r\n  url.search = new URLSearchParams({\r\n    type: 'CITY',\r\n    q: query,\r\n    limit: '10'\r\n  })\r\n\r\n  return await requestApi(url)\r\n\r\n  // return data\r\n}\r\n\r\nasync function getCity ({ latitude, longitude }) {\r\n  console.log('GETTING CITY', latitude, longitude)\r\n  const url = new URL('https://spott.p.rapidapi.com/places')\r\n  url.search = new URLSearchParams({\r\n    type: 'CITY',\r\n    latitude,\r\n    longitude,\r\n    limit: '1'\r\n  })\r\n  return (await requestApi(url))[0]\r\n}\r\n\r\nasync function requestApi (url) {\r\n  const res = await fetch(url.toString(), {\r\n    method: 'GET',\r\n    headers: {\r\n      'x-rapidapi-key': process.env.REACT_APP_CITIESAPI_KEY,\r\n      'x-rapidapi-host': 'spott.p.rapidapi.com'\r\n    }\r\n  })\r\n  const body = await res.json()\r\n  return body\r\n}\r\n\r\nexport { getSearchOptions, getCity }\r\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogContentText,\r\n  TextField\r\n} from '@material-ui/core'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport { getSearchOptions } from '../api/places'\r\n\r\n/* function useDebounce (value, delay) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value)\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => setDebouncedValue(value), delay)\r\n    return () => clearTimeout(handler)\r\n  }, [value, delay])\r\n  return debouncedValue\r\n} */\r\n\r\nexport default function Search ({ open, onClose, onSelect }) {\r\n  const [options, setOptions] = useState([])\r\n  const [value, setValue] = useState('')\r\n  const [isSearching, setIsSearching] = useState(false)\r\n  /*   const [debouncedQuery, setDebouncedQuery] = useDebounce(value, 500)\r\n  useEffect(() => {\r\n    if (debouncedQuery) {\r\n      setIsSearching(true)\r\n      getSearchOptions(debouncedQuery).then(result => {\r\n        setIsSearching(false)\r\n        setOptions(result)\r\n      })\r\n    } else {\r\n      setOptions([])\r\n      setIsSearching(false)\r\n    }\r\n    console.log(options)\r\n  }, [debouncedQuery]) */\r\n\r\n  useEffect(() => {\r\n    if (!isSearching && value) {\r\n      setIsSearching(true)\r\n      getSearchOptions(value).then(result => {\r\n        console.log(result)\r\n        setIsSearching(false)\r\n        setOptions(result)\r\n      })\r\n    }\r\n  }, [value])\r\n\r\n  function handleClose () {\r\n    setOptions([])\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} maxWidth='sm' fullWidth>\r\n      <DialogContent>\r\n        <DialogContentText variant='subtitle2'>\r\n          Enter City Name\r\n        </DialogContentText>\r\n        <Autocomplete\r\n          options={options}\r\n          getOptionLabel={el => el && el.name}\r\n          onChange={(e, newValue) => {\r\n            onSelect(newValue)\r\n            onClose()\r\n          }}\r\n          onInputChange={e => setValue(e.target.value)}\r\n          filterOptions={(options, state) => options}\r\n          renderInput={params => (\r\n            <TextField\r\n              {...params}\r\n              style={{ width: '100%' }}\r\n              margin='normal'\r\n              InputProps={{ ...params.InputProps, type: 'search' }}\r\n            />\r\n          )}\r\n        />\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n","import { useState } from 'react'\n\nimport {\n  Container,\n  createMuiTheme,\n  IconButton,\n  ThemeProvider\n} from '@material-ui/core'\nimport SearchIcon from '@material-ui/icons/Search'\n\nimport DetailedWeather from './components/DetailedWeather'\nimport Forecast from './components/Forecast'\nimport Search from './components/Search'\nimport UnitInput from './components/UnitInput '\n\nimport { getCity } from './api/places'\nimport { getDetailedForecast } from './api/weather'\n\nimport './App.css'\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#084887'\n    },\n    secondary: {\n      main: '#def0ff'\n    }\n  },\n  spacing: 2\n})\n\nfunction App () {\n  const [unit, setUnit] = useState(localStorage.getItem('unit') || 'metric')\n  const [cities, setCities] = useState(\n    JSON.parse(localStorage.getItem('cities')) || []\n  )\n  const [openWeather, setOpenWeather] = useState(false)\n  const [openSearch, setOpenSearch] = useState(false)\n  const [showAdd, setShowAdd] = useState(true)\n  const [selectedForecast, setSelectedForecast] = useState('')\n  const [selectedCity, setSelectedCity] = useState('')\n\n  const updateUnit = unit => {\n    localStorage.setItem('unit', unit)\n    setUnit(unit)\n  }\n\n  const updateCities = city => {\n    console.log('updating city')\n    localStorage.setItem('cities', JSON.stringify([...cities, city]))\n    setCities([...cities, city])\n  }\n\n  if (!cities.length) {\n    navigator.geolocation.getCurrentPosition(\n      async ({ coords: { latitude, longitude } }) =>\n        updateCities(await getCity({ latitude, longitude })),\n      () => setOpenSearch(true)\n    )\n  }\n\n  function addCity () {\n    if (\n      selectedCity &&\n      cities.indexOf(city => city.id === selectedCity.id) < 0\n    ) {\n      updateCities(selectedCity)\n    }\n    setSelectedCity('')\n    setOpenWeather(false)\n  }\n\n  async function viewDetailedWeather ({ forecast, city }) {\n    // console.log('forecast', forecast, 'city', city?.name, 'showAdd', showAdd)\n    if (forecast) {\n      setShowAdd(false)\n      // console.log('forecast', forecast, 'city', city?.name, 'showAdd', showAdd)\n    } else {\n      forecast = await getDetailedForecast(city)\n    }\n    setSelectedForecast(forecast)\n    setOpenWeather(true)\n  }\n\n  async function handleCitySelection (newCity) {\n    setSelectedCity(newCity)\n    setOpenSearch(false)\n    viewDetailedWeather({ city: newCity })\n  }\n  return (\n    <div className='App'>\n      <ThemeProvider theme={theme}>\n        <Container maxWidth='md'>\n          {cities.map(city => (\n            <Forecast\n              key={city.id}\n              city={city}\n              unit={unit}\n              onSelectForecast={forecast => viewDetailedWeather({ forecast })}\n            ></Forecast>\n          ))}\n        </Container>\n        <Container maxWidth='md'>\n          <UnitInput unit={unit} updateUnit={updateUnit} />\n          <IconButton\n            color='primary'\n            aria-label='Search City'\n            style={{ float: 'right' }}\n            onClick={() => setOpenSearch(true)}\n          >\n            <SearchIcon />\n          </IconButton>\n          <Search\n            open={openSearch}\n            onClose={() => setOpenSearch(false)}\n            onSelect={handleCitySelection}\n          />\n        </Container>\n        <DetailedWeather\n          open={openWeather}\n          forecast={selectedForecast}\n          onClose={() => setOpenWeather(false)}\n          onAdd={addCity}\n          showAdd={showAdd}\n          unit={unit}\n          updateUnit={updateUnit}\n        />\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}