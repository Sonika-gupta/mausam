{"version":3,"sources":["utils.js","components/SubComponents.js","components/Current.js","components/Tile.js","components/Hourly.js","components/Daily.js","components/UnitInput .js","components/DayDetails.js","components/DetailedWeather.js","api/weather.js","components/Forecast.js","api/places.js","components/Search.js","App.js","index.js"],"names":["getTime","timezone","dt","Date","toLocaleTimeString","timeZone","hour","minute","getDay","toLocaleDateString","weekday","month","day","getTemp","temp","metric","parseInt","imperial","WeatherIcon","weather","size","style","margin","src","icon","alt","description","caption","width","height","Description","variant","Typography","component","align","textTransform","Time","Day","Temperature","temperature","unit","Current","forecast","Container","city","name","paddingLeft","country","id","Grid","container","background","border","justify","spacing","item","current","styles","alignItems","minWidth","Tile","type","children","Object","assign","Paper","square","useStyles","makeStyles","root","display","flexWrap","marginTop","overflow","gridList","borderTop","borderBottom","gridListTile","textAlign","padding","Hourly","classes","className","GridList","cols","map","i","GridListTile","Daily","UnitInput","updateUnit","float","color","Switch","checked","onChange","e","isMetric","theme","listItem","breakpoints","down","DayDetails","entries","sunrise","sunset","feels_like","humidity","pressure","wind_speed","visibility","uvi","dew_point","clouds","prop","value","ListItem","ListSubheader","replaceAll","Transition","forwardRef","props","ref","Zoom","DetailedWeather","open","onClose","onAdd","showAdd","dialog","minwidth","backgroundImage","dialogPaper","minHeight","maxHeight","Dialog","fullWidth","maxWidth","TransitionComponent","paper","DialogContent","DialogActions","Button","onClick","hourly","daily","getDetailedForecast","a","coordinates","latitude","longitude","console","log","lon","process","part","key","url","fetch","res","setDetails","json","main","time","image1","image2","toLowerCase","split","getBackground","card","Forecast","onSelectForecast","useState","setForecast","useEffect","Card","CardActionArea","CardContent","query","URL","search","URLSearchParams","q","limit","requestApi","getCity","toString","method","headers","body","Search","onSelect","options","setOptions","setValue","isSearching","setIsSearching","getSearchOptions","then","result","DialogContentText","Autocomplete","getOptionLabel","el","newValue","onInputChange","target","filterOptions","state","renderInput","params","TextField","InputProps","createMuiTheme","palette","primary","secondary","App","localStorage","getItem","setUnit","JSON","parse","cities","setCities","openWeather","setOpenWeather","openSearch","setOpenSearch","setShowAdd","selectedForecast","setSelectedForecast","selectedCity","setSelectedCity","setItem","updateCities","stringify","viewDetailedWeather","newCity","length","navigator","geolocation","getCurrentPosition","coords","ThemeProvider","IconButton","aria-label","indexOf","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f6547d9.chunk.js","sourcesContent":["const getTime = (timezone, dt) => {\r\n  const date = dt ? new Date(dt * 1000) : new Date()\r\n  return date.toLocaleTimeString('en-US', {\r\n    timeZone: timezone,\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  })\r\n}\r\n\r\nconst getDay = (timezone, dt) => {\r\n  /* const date = new Date(dt)\r\n   return new Intl.DateTimeFormat('en', {\r\n    weekday: 'short',\r\n    month: 'short',\r\n    day: '2-digit',\r\n    timeZone: timezone\r\n  }).format(date) */\r\n  const date = new Date(dt * 1000)\r\n  return date.toLocaleDateString('en-US', {\r\n    timeZone: timezone,\r\n    weekday: 'short',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\nconst getBackground = ({ icon, main, description }) => {\r\n  const time = icon[2] === 'd' ? 'day' : 'night'\r\n  let image1 = ''\r\n  const image2 = 'backgrounds/' + time + '/clear.jpg'\r\n\r\n  main = main.toLowerCase()\r\n\r\n  // TODO: GET gif FOR EVERY PATH1\r\n  if (main === 'rain' || main === 'snow') image1 = `backgrounds/${main}.svg`\r\n  else if (main === 'fog') image1 = 'backgrounds/fog.png'\r\n  else if (main === 'thunderstorm' || main === 'tornado')\r\n    image1 = `backgrounds/${main}.jpg`\r\n  else if (main === 'clouds') {\r\n    image1 =\r\n      description === 'scattered clouds'\r\n        ? `backgrounds/${time}/${main}/scattered.gif`\r\n        : `backgrounds/${time}/${main}/${description.split(' ')[0]}.jpg`\r\n  }\r\n\r\n  return (image1 ? `url(${image1}),` : '') + `url(${image2})`\r\n}\r\n\r\nfunction getTemp (temp) {\r\n  return {\r\n    metric: parseInt(temp - 276.15),\r\n    imperial: parseInt(((temp - 276.15) * 9) / 5 + 32)\r\n  }\r\n}\r\nexport { getTime, getDay, getBackground, getTemp }\r\n","import { Typography } from '@material-ui/core'\r\nimport { getTime, getDay, getTemp } from '../utils'\r\n\r\nfunction WeatherIcon ({ weather, size }) {\r\n  return (\r\n    <img\r\n      style={{ margin: 'auto' }}\r\n      src={`http://openweathermap.org/img/w/${weather.icon}.png`}\r\n      alt={weather.description}\r\n      caption={weather.description}\r\n      width={size}\r\n      height={size}\r\n    />\r\n  )\r\n}\r\nfunction Description ({ weather, variant = 'subtitle1' }) {\r\n  return (\r\n    <Typography\r\n      component='div'\r\n      align='center'\r\n      variant={variant}\r\n      style={{ textTransform: 'capitalize' }}\r\n    >\r\n      {weather.description}\r\n    </Typography>\r\n  )\r\n}\r\n\r\nfunction Time ({ dt, timezone, variant = 'body1' }) {\r\n  return <Typography variant={variant}>{getTime(timezone, dt)}</Typography>\r\n}\r\n\r\nfunction Day ({ dt, timezone }) {\r\n  return <Typography variant='caption'>{getDay(timezone, dt)}</Typography>\r\n}\r\n\r\nfunction Temperature ({ temperature, unit, variant = 'h3' }) {\r\n  const temp = unit ? getTemp(temperature)[unit] : temperature\r\n  return (\r\n    <Typography align='center' variant={variant}>\r\n      {temp}&deg;\r\n    </Typography>\r\n  )\r\n}\r\n\r\nexport { WeatherIcon, Temperature, Description, Time, Day }\r\n","import { Container, Grid, Typography } from '@material-ui/core'\r\nimport { Temperature, Description } from './SubComponents'\r\n\r\nexport default function Current ({ forecast, unit }) {\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Typography variant='h6' align='center'>\r\n          {forecast.city?.name},\r\n          <Typography\r\n            variant='body1'\r\n            component='span'\r\n            style={{ paddingLeft: '5px' }}\r\n          >\r\n            {forecast.city?.country?.id}\r\n          </Typography>\r\n        </Typography>\r\n      </Container>\r\n      <Grid\r\n        container\r\n        style={{\r\n          background: 'transparent',\r\n          border: 'none',\r\n          margin: 'auto'\r\n        }}\r\n        justify='space-evenly'\r\n        spacing={2}\r\n      >\r\n        <Grid item>\r\n          <Temperature temperature={forecast.current[unit]} variant='h2' />\r\n        </Grid>\r\n        <Container>\r\n          <Description weather={forecast.current.weather[0]} />\r\n        </Container>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n","import { WeatherIcon, Temperature, Description } from './SubComponents'\r\nimport { getTemp } from '../utils'\r\nimport { Paper } from '@material-ui/core'\r\n\r\nconst styles = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  width: '100%',\r\n  height: '72%',\r\n  alignItems: 'center',\r\n  minWidth: '100px'\r\n}\r\n\r\nexport default function Tile ({ weather, unit, type, children }) {\r\n  type === 'daily'\r\n    ? Object.assign(weather, getTemp(weather.temp.day))\r\n    : Object.assign(weather, getTemp(weather.temp))\r\n  return (\r\n    <Paper variant='outlined' square style={styles}>\r\n      <WeatherIcon weather={weather.weather[0]} />\r\n      <Temperature temperature={weather[unit]} variant='h5' />\r\n      <Description weather={weather.weather[0]} variant='caption' />\r\n    </Paper>\r\n  )\r\n}\r\n","import {\r\n  GridList,\r\n  GridListTile,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core'\r\nimport Tile from './Tile'\r\nimport { Time } from './SubComponents'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    marginTop: '50px',\r\n    overflow: 'hidden'\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    borderTop: 'solid 1px white',\r\n    borderBottom: 'solid 1px white'\r\n  },\r\n  gridListTile: {\r\n    background: 'transparent',\r\n    border: 'none',\r\n    textAlign: 'center',\r\n    padding: '5px',\r\n    minWidth: '100px'\r\n  }\r\n})\r\nexport default function Hourly ({ forecast, unit, timezone }) {\r\n  const classes = useStyles()\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant='overline'>Hourly Forecast</Typography>\r\n      <GridList cols={4} spacing={0} className={classes.gridList}>\r\n        {forecast.map((weather, i) => (\r\n          <GridListTile cols={0.5} key={i} className={classes.gridListTile}>\r\n            <Tile weather={weather} unit={unit} />\r\n            <div>\r\n              <hr style={{ width: '100%', margin: '10px auto' }} />\r\n              <Time timezone={timezone} dt={weather.dt} />\r\n            </div>\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  )\r\n}\r\n","import {\r\n  GridList,\r\n  GridListTile,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core'\r\nimport Tile from './Tile'\r\nimport { Day } from './SubComponents'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: '50px',\r\n    overflow: 'hidden',\r\n    width: '100%'\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    borderTop: 'solid 1px white',\r\n    borderBottom: 'solid 1px white',\r\n    width: '100%'\r\n  },\r\n  gridListTile: {\r\n    background: 'transparent',\r\n    border: 'none',\r\n    textAlign: 'center',\r\n    padding: '5px',\r\n    minWidth: '100px'\r\n  }\r\n})\r\nexport default function Daily ({ forecast, unit, timezone }) {\r\n  const classes = useStyles()\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant='overline'>Daily Forecast</Typography>\r\n      <GridList cols={4} spacing={0} className={classes.gridList}>\r\n        {forecast.map(weather => (\r\n          <GridListTile\r\n            cols={0.5}\r\n            key={weather.dt}\r\n            className={classes.gridListTile}\r\n          >\r\n            <Tile weather={weather} unit={unit} type='daily' />\r\n            <div>\r\n              <hr style={{ width: '100%', margin: '10px auto' }} />\r\n              <Day timezone={timezone} dt={weather.dt} />\r\n            </div>\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  )\r\n}\r\n","import Switch from '@material-ui/core/Switch'\r\n\r\nexport default function UnitInput ({ unit, updateUnit }) {\r\n  return (\r\n    <span style={{ float: 'left', color: 'white' }}>\r\n      &deg;F\r\n      <Switch\r\n        checked={unit === 'metric'}\r\n        onChange={(e, isMetric) => updateUnit(isMetric ? 'metric' : 'imperial')}\r\n        name='unit'\r\n      />\r\n      &deg;C\r\n    </span>\r\n  )\r\n}\r\n","import {\r\n  GridList,\r\n  ListItem,\r\n  ListSubheader,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core'\r\nimport { Time, Temperature } from './SubComponents'\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: '50px auto'\r\n  },\r\n  gridList: {\r\n    borderTop: 'solid 1px white',\r\n    borderBottom: 'solid 1px white',\r\n    paddingLeft: 'revert'\r\n  },\r\n  listItem: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      width: '100% !important'\r\n    }\r\n  }\r\n}))\r\n\r\nexport default function DayDetails ({ weather, timezone, unit }) {\r\n  const classes = useStyles()\r\n  const details = {\r\n    sunrise: 'time',\r\n    sunset: 'time',\r\n    feels_like: 'temp',\r\n    humidity: '%',\r\n    pressure: 'hPa',\r\n    wind_speed: 'm/s',\r\n    visibility: 'm',\r\n    uvi: '',\r\n    dew_point: 'temp',\r\n    clouds: '%'\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant='overline'>Day Details</Typography>\r\n      <GridList className={classes.gridList}>\r\n        {Object.entries(details).map(([prop, value]) => {\r\n          const component =\r\n            value === 'time' ? (\r\n              <Time dt={weather[prop]} timezone={timezone} variant='h6' />\r\n            ) : value === 'temp' ? (\r\n              <Temperature\r\n                temperature={weather[prop]}\r\n                unit={unit}\r\n                variant='h6'\r\n              />\r\n            ) : (\r\n              <Typography variant='h6'>\r\n                {weather[prop]} {value}\r\n              </Typography>\r\n            )\r\n\r\n          return (\r\n            <ListItem\r\n              key={prop}\r\n              className={classes.listItem}\r\n              style={{ height: 'auto' }}\r\n            >\r\n              <ListSubheader style={{ textTransform: 'uppercase' }}>\r\n                {prop.replaceAll('_', ' ')}\r\n              </ListSubheader>\r\n              {component}\r\n            </ListItem>\r\n          )\r\n        })}\r\n      </GridList>\r\n    </div>\r\n  )\r\n}\r\n","import { forwardRef } from 'react'\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  Grid,\r\n  Zoom\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport Current from './Current'\r\nimport Hourly from './Hourly'\r\nimport Daily from './Daily'\r\nimport UnitInput from './UnitInput '\r\nimport DayDetails from './DayDetails'\r\n\r\nconst Transition = forwardRef(function Transition (props, ref) {\r\n  return <Zoom ref={ref} {...props} />\r\n})\r\nexport default function DetailedWeather ({\r\n  open,\r\n  onClose,\r\n  onAdd,\r\n  forecast,\r\n  showAdd,\r\n  unit,\r\n  updateUnit\r\n}) {\r\n  const classes = makeStyles({\r\n    dialog: {\r\n      minwidth: '400px',\r\n      backgroundImage: forecast.background\r\n    },\r\n    dialogPaper: {\r\n      minHeight: '90vh',\r\n      maxHeight: '80vh'\r\n    }\r\n  })()\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      fullWidth\r\n      maxWidth='lg'\r\n      TransitionComponent={Transition}\r\n      classes={{ paper: classes.dialogPaper }}\r\n    >\r\n      <DialogContent className={classes.dialog}>\r\n        <Grid\r\n          container\r\n          spacing={10}\r\n          style={{ height: '100%' }}\r\n          justify='space-between'\r\n        >\r\n          <Grid item>\r\n            <UnitInput unit={unit} updateUnit={updateUnit} />\r\n          </Grid>\r\n          <Grid item>\r\n            <DialogActions>\r\n              {showAdd && (\r\n                <Button onClick={onAdd} color='secondary'>\r\n                  Add\r\n                </Button>\r\n              )}\r\n              <Button onClick={onClose} color='secondary'>\r\n                Done\r\n              </Button>\r\n            </DialogActions>\r\n          </Grid>\r\n          <Current forecast={forecast} unit={unit} />\r\n          <Hourly\r\n            forecast={forecast.hourly}\r\n            unit={unit}\r\n            timezone={forecast.timezone}\r\n          />\r\n          <Daily\r\n            forecast={forecast.daily}\r\n            unit={unit}\r\n            timezone={forecast.timezone}\r\n          />\r\n          <DayDetails\r\n            weather={forecast.current}\r\n            timezone={forecast.timezone}\r\n            unit={unit}\r\n          />\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n","import { getBackground, getTemp } from '../utils'\r\n\r\nasync function getDetailedForecast (city) {\r\n  const {\r\n    coordinates: { latitude, longitude }\r\n  } = city\r\n  console.log('Getting detailed forecast for ', latitude, longitude)\r\n  const [lat, lon, part, key] = [\r\n    latitude,\r\n    longitude,\r\n    'minutely,alerts',\r\n    process.env.REACT_APP_WEATHERAPI_KEY\r\n  ]\r\n  const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=${part}&appid=${key}`\r\n  const res = await fetch(url)\r\n  return setDetails(await res.json(), city)\r\n}\r\n\r\nfunction setDetails (forecast, city) {\r\n  Object.assign(forecast.current, getTemp(forecast.current.temp))\r\n  forecast.background = getBackground(forecast.current.weather[0])\r\n  forecast.city = city\r\n  return forecast\r\n}\r\nexport { getDetailedForecast }\r\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  Typography\r\n} from '@material-ui/core'\r\nimport { WeatherIcon, Temperature, Time } from './SubComponents'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { getDetailedForecast } from '../api/weather'\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    margin: '5px auto'\r\n  },\r\n  city: {\r\n    width: '70%',\r\n    textAlign: 'left'\r\n  },\r\n  temperature: {\r\n    margin: '5px'\r\n  }\r\n})\r\n\r\nexport default function Forecast ({ city, unit, onSelectForecast }) {\r\n  console.log('Loaded city and unit')\r\n  const [forecast, setForecast] = useState('')\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      setForecast(await getDetailedForecast(city))\r\n    })()\r\n  }, [city])\r\n\r\n  const classes = useStyles()\r\n  return (\r\n    <>\r\n      {forecast && (\r\n        <Card\r\n          className={classes.card}\r\n          color='primary'\r\n          style={{ backgroundImage: forecast.background }}\r\n        >\r\n          <CardActionArea\r\n            style={{ display: 'flex' }}\r\n            onClick={() => onSelectForecast(forecast)}\r\n          >\r\n            <CardContent>\r\n              <WeatherIcon weather={forecast.current.weather[0]} />\r\n            </CardContent>\r\n            <CardContent className={classes.city}>\r\n              <Time timezone={forecast.timezone} variant='caption' />\r\n              <Typography variant='h5'>{forecast.city.name}</Typography>\r\n            </CardContent>\r\n            <CardContent className={classes.temperature}>\r\n              <Temperature temperature={forecast.current[unit]} />\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Card>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","async function getSearchOptions (query) {\r\n  const url = new URL('https://spott.p.rapidapi.com/places/autocomplete')\r\n  url.search = new URLSearchParams({\r\n    type: 'CITY',\r\n    q: query,\r\n    limit: '10'\r\n  })\r\n\r\n  return await requestApi(url)\r\n}\r\n\r\nasync function getCity ({ latitude, longitude }) {\r\n  console.log('GETTING CITY', latitude, longitude)\r\n  const url = new URL('https://spott.p.rapidapi.com/places')\r\n  url.search = new URLSearchParams({\r\n    type: 'CITY',\r\n    latitude,\r\n    longitude,\r\n    limit: '1'\r\n  })\r\n  return (await requestApi(url))[0]\r\n}\r\n\r\nasync function requestApi (url) {\r\n  const res = await fetch(url.toString(), {\r\n    method: 'GET',\r\n    headers: {\r\n      'x-rapidapi-key': process.env.REACT_APP_CITIESAPI_KEY,\r\n      'x-rapidapi-host': 'spott.p.rapidapi.com'\r\n    }\r\n  })\r\n  const body = await res.json()\r\n  return body\r\n}\r\n\r\nexport { getSearchOptions, getCity }\r\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogContentText,\r\n  TextField\r\n} from '@material-ui/core'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport { getSearchOptions } from '../api/places'\r\n\r\n/* function useDebounce (value, delay) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value)\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => setDebouncedValue(value), delay)\r\n    return () => clearTimeout(handler)\r\n  }, [value, delay])\r\n  return debouncedValue\r\n} */\r\n\r\nexport default function Search ({ open, onClose, onSelect }) {\r\n  const [options, setOptions] = useState([])\r\n  const [value, setValue] = useState('')\r\n  const [isSearching, setIsSearching] = useState(false)\r\n  /*   const [debouncedQuery, setDebouncedQuery] = useDebounce(value, 500)\r\n  useEffect(() => {\r\n    if (debouncedQuery) {\r\n      setIsSearching(true)\r\n      getSearchOptions(debouncedQuery).then(result => {\r\n        setIsSearching(false)\r\n        setOptions(result)\r\n      })\r\n    } else {\r\n      setOptions([])\r\n      setIsSearching(false)\r\n    }\r\n    console.log(options)\r\n  }, [debouncedQuery]) */\r\n\r\n  useEffect(() => {\r\n    if (!isSearching && value) {\r\n      setIsSearching(true)\r\n      getSearchOptions(value).then(result => {\r\n        console.log(result)\r\n        setIsSearching(false)\r\n        setOptions(result)\r\n      })\r\n    }\r\n  }, [value])\r\n\r\n  function handleClose () {\r\n    setOptions([])\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} maxWidth='sm' fullWidth>\r\n      <DialogContent>\r\n        <DialogContentText variant='subtitle2'>\r\n          Enter City Name\r\n        </DialogContentText>\r\n        <Autocomplete\r\n          options={options}\r\n          getOptionLabel={el => el && el.name}\r\n          onChange={(e, newValue) => {\r\n            onSelect(newValue)\r\n            onClose()\r\n          }}\r\n          onInputChange={e => setValue(e.target.value)}\r\n          filterOptions={(options, state) => options}\r\n          renderInput={params => (\r\n            <TextField\r\n              {...params}\r\n              style={{ width: '100%' }}\r\n              margin='normal'\r\n              InputProps={{ ...params.InputProps, type: 'search' }}\r\n            />\r\n          )}\r\n        />\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n","import { useState } from 'react'\n\nimport {\n  Container,\n  createMuiTheme,\n  IconButton,\n  ThemeProvider\n} from '@material-ui/core'\nimport SearchIcon from '@material-ui/icons/Search'\n\nimport DetailedWeather from './components/DetailedWeather'\nimport Forecast from './components/Forecast'\nimport Search from './components/Search'\nimport UnitInput from './components/UnitInput '\n\nimport { getCity } from './api/places'\nimport { getDetailedForecast } from './api/weather'\n\nimport './App.css'\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#084887'\n    },\n    secondary: {\n      main: '#def0ff'\n    }\n  },\n  spacing: 2\n})\n\nfunction App () {\n  const [unit, setUnit] = useState(localStorage.getItem('unit') || 'metric')\n  const [cities, setCities] = useState(\n    JSON.parse(localStorage.getItem('cities')) || []\n  )\n  const [openWeather, setOpenWeather] = useState(false)\n  const [openSearch, setOpenSearch] = useState(false)\n  const [showAdd, setShowAdd] = useState(false)\n  const [selectedForecast, setSelectedForecast] = useState('')\n  const [selectedCity, setSelectedCity] = useState('')\n\n  const updateUnit = unit => {\n    localStorage.setItem('unit', unit)\n    setUnit(unit)\n  }\n\n  const updateCities = city => {\n    console.log('updating city')\n    localStorage.setItem('cities', JSON.stringify([...cities, city]))\n    setCities([...cities, city])\n  }\n\n  if (!cities.length) {\n    navigator.geolocation.getCurrentPosition(\n      async ({ coords: { latitude, longitude } }) =>\n        updateCities(await getCity({ latitude, longitude })),\n      () => setOpenSearch(true)\n    )\n  }\n\n  function addCity () {\n    if (\n      selectedCity &&\n      cities.indexOf(city => city.id === selectedCity.id) < 0\n    ) {\n      updateCities(selectedCity)\n    }\n    setSelectedCity('')\n    setOpenWeather(false)\n  }\n\n  async function viewDetailedWeather ({ forecast, city }) {\n    if (!forecast) {\n      forecast = await getDetailedForecast(city)\n      setShowAdd(true)\n    }\n    setSelectedForecast(forecast)\n    setOpenWeather(true)\n  }\n\n  async function handleCitySelection (newCity) {\n    setSelectedCity(newCity)\n    setOpenSearch(false)\n    viewDetailedWeather({ city: newCity })\n  }\n  return (\n    <div className='App'>\n      <ThemeProvider theme={theme}>\n        <Container maxWidth='md'>\n          {cities.map(city => (\n            <Forecast\n              key={city.id}\n              city={city}\n              unit={unit}\n              onSelectForecast={forecast => viewDetailedWeather({ forecast })}\n            ></Forecast>\n          ))}\n        </Container>\n        <Container maxWidth='md'>\n          <UnitInput unit={unit} updateUnit={updateUnit} />\n          <IconButton\n            color='primary'\n            aria-label='Search City'\n            style={{ float: 'right' }}\n            onClick={() => setOpenSearch(true)}\n          >\n            <SearchIcon />\n          </IconButton>\n          <Search\n            open={openSearch}\n            onClose={() => setOpenSearch(false)}\n            onSelect={handleCitySelection}\n          />\n        </Container>\n        <DetailedWeather\n          open={openWeather}\n          forecast={selectedForecast}\n          onClose={() => setOpenWeather(false)}\n          onAdd={addCity}\n          showAdd={showAdd}\n          unit={unit}\n          updateUnit={updateUnit}\n        />\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}